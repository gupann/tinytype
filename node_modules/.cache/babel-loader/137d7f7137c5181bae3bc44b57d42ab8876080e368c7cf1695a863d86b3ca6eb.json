{"ast":null,"code":"var _jsxFileName = \"/Users/anmol/Downloads/tinytype/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // added this\n  const [isCapsLock, setIsCapsLock] = useState(false); // State to track caps lock\n\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(null);\n  const [tapTimeoutId, setTapTimeoutId] = useState(null);\n  const [tapCount, setTapCount] = useState(0);\n  const tapDelay = 1000;\n  const handleKeyTap = key => {\n    const currentTime = new Date().getTime();\n    const isQuickTap = lastTap && currentTime - lastTap < tapDelay;\n    let newTapCount = isQuickTap ? tapCount + 1 : 1;\n\n    //added this\n    if (key.action === 'delete' || key.action === 'space' || key.action === 'caps') {\n      clearTimeout(tapTimeoutId); // Prevent delayed actions from interfering\n      if (key.action === 'delete') {\n        setInputValue(prev => prev.slice(0, -1)); // Delete last character\n      } else if (key.action === 'space') {\n        setInputValue(prev => prev + ' '); // Add space\n      } else if (key.action === 'caps') {\n        setIsCapsLock(prev => !prev);\n      }\n      setLastTap(currentTime); // Update last tap time\n      return; // Exit early to avoid setting up unnecessary timeouts\n    }\n    const handleSingleTap = () => {\n      if (key.type === 'function') {\n        switch (key.action) {\n          // case 'delete':\n          //   setInputValue((prevValue) => prevValue.slice(0, -1));\n          //   break;\n          // case 'caps':\n          //   // added this\n          //   setIsCapsLock((prev) => !prev);\n          //   break;\n          // case 'space':\n          //   setInputValue((prevValue) => prevValue + ' ');\n          //   break;\n          case 'symbols':\n            // Logic to change keyboard or render new screen goes here\n            break;\n          default:\n            break;\n        }\n      } else {\n        // setInputValue((prevValue) => prevValue + key.top);\n\n        // added this\n        const charToAdd = isCapsLock ? key.top.toUpperCase() : key.top; // Use caps lock state\n        setInputValue(prev => prev + charToAdd);\n      }\n    };\n    const handleDoubleTap = () => {\n      if (key.bottom) {\n        if (key.type === 'function') {\n          if (key.action === 'symbols') {\n            // change keyboard, render new screen\n          }\n        } else {\n          // setInputValue((prevValue) => prevValue + key.bottom.split(' ')[0]);\n\n          // added this\n          const charToAdd = isCapsLock ? key.bottom.split(' ')[0].toUpperCase() : key.bottom.split(' ')[0];\n          setInputValue(prev => prev + charToAdd);\n        }\n      }\n    };\n    const handleTripleTap = () => {\n      if (key.bottom && key.bottom.includes(' ')) {\n        // setInputValue((prevValue) => prevValue + key.bottom.split(' ')[1]);\n\n        // added this\n        const charToAdd = isCapsLock ? key.bottom.split(' ')[1].toUpperCase() : key.bottom.split(' ')[1];\n        setInputValue(prev => prev + charToAdd);\n      }\n    };\n    clearTimeout(tapTimeoutId);\n    const timeoutId = setTimeout(() => {\n      if (newTapCount === 1) handleSingleTap();else if (newTapCount === 2) handleDoubleTap();else if (newTapCount === 3) handleTripleTap();\n      setTapCount(0);\n    }, tapDelay);\n    setTapTimeoutId(timeoutId);\n    setTapCount(newTapCount);\n    setLastTap(currentTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"TinyType\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"textInput\",\n        placeholder: \"Type here...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        onKeyTap: handleKeyTap,\n        isCapsLock: isCapsLock\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"rulesHeading\",\n        children: \"Rules \\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Top letter: Single Tap | Bottom/Bottom Left: Double Tap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Bottom Right: Triple Tap | Hold for character repeat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"TxJXyIG4btBT5CWyRufDGu77SCg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Grid","jsxDEV","_jsxDEV","App","_s","isCapsLock","setIsCapsLock","inputValue","setInputValue","lastTap","setLastTap","tapTimeoutId","setTapTimeoutId","tapCount","setTapCount","tapDelay","handleKeyTap","key","currentTime","Date","getTime","isQuickTap","newTapCount","action","clearTimeout","prev","slice","handleSingleTap","type","charToAdd","top","toUpperCase","handleDoubleTap","bottom","split","handleTripleTap","includes","timeoutId","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyTap","_c","$RefreshReg$"],"sources":["/Users/anmol/Downloads/tinytype/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css';\n\nconst App = () => {\n  // added this\n  const [isCapsLock, setIsCapsLock] = useState(false); // State to track caps lock\n\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(null);\n  const [tapTimeoutId, setTapTimeoutId] = useState(null);\n  const [tapCount, setTapCount] = useState(0);\n\n  const tapDelay = 1000;\n\n  const handleKeyTap = (key) => {\n    const currentTime = new Date().getTime();\n    const isQuickTap = lastTap && currentTime - lastTap < tapDelay;\n    let newTapCount = isQuickTap ? tapCount + 1 : 1;\n\n    //added this\n    if (\n      key.action === 'delete' ||\n      key.action === 'space' ||\n      key.action === 'caps'\n    ) {\n      clearTimeout(tapTimeoutId); // Prevent delayed actions from interfering\n      if (key.action === 'delete') {\n        setInputValue((prev) => prev.slice(0, -1)); // Delete last character\n      } else if (key.action === 'space') {\n        setInputValue((prev) => prev + ' '); // Add space\n      } else if (key.action === 'caps') {\n        setIsCapsLock((prev) => !prev);\n      }\n      setLastTap(currentTime); // Update last tap time\n      return; // Exit early to avoid setting up unnecessary timeouts\n    }\n\n    const handleSingleTap = () => {\n      if (key.type === 'function') {\n        switch (key.action) {\n          // case 'delete':\n          //   setInputValue((prevValue) => prevValue.slice(0, -1));\n          //   break;\n          // case 'caps':\n          //   // added this\n          //   setIsCapsLock((prev) => !prev);\n          //   break;\n          // case 'space':\n          //   setInputValue((prevValue) => prevValue + ' ');\n          //   break;\n          case 'symbols':\n            // Logic to change keyboard or render new screen goes here\n            break;\n          default:\n            break;\n        }\n      } else {\n        // setInputValue((prevValue) => prevValue + key.top);\n\n        // added this\n        const charToAdd = isCapsLock ? key.top.toUpperCase() : key.top; // Use caps lock state\n        setInputValue((prev) => prev + charToAdd);\n      }\n    };\n    const handleDoubleTap = () => {\n      if (key.bottom) {\n        if (key.type === 'function') {\n          if (key.action === 'symbols') {\n            // change keyboard, render new screen\n          }\n        } else {\n          // setInputValue((prevValue) => prevValue + key.bottom.split(' ')[0]);\n\n          // added this\n          const charToAdd = isCapsLock\n            ? key.bottom.split(' ')[0].toUpperCase()\n            : key.bottom.split(' ')[0];\n          setInputValue((prev) => prev + charToAdd);\n        }\n      }\n    };\n\n    const handleTripleTap = () => {\n      if (key.bottom && key.bottom.includes(' ')) {\n        // setInputValue((prevValue) => prevValue + key.bottom.split(' ')[1]);\n\n        // added this\n        const charToAdd = isCapsLock\n          ? key.bottom.split(' ')[1].toUpperCase()\n          : key.bottom.split(' ')[1];\n        setInputValue((prev) => prev + charToAdd);\n      }\n    };\n\n    clearTimeout(tapTimeoutId);\n    const timeoutId = setTimeout(() => {\n      if (newTapCount === 1) handleSingleTap();\n      else if (newTapCount === 2) handleDoubleTap();\n      else if (newTapCount === 3) handleTripleTap();\n\n      setTapCount(0);\n    }, tapDelay);\n\n    setTapTimeoutId(timeoutId);\n    setTapCount(newTapCount);\n    setLastTap(currentTime);\n  };\n  return (\n    <div className='container'>\n      <div>\n        <h1 className='title'>TinyType</h1>\n      </div>\n      <div className='inputContainer'>\n        <textarea\n          className='textInput'\n          placeholder='Type here...'\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n      </div>\n      <div className='gridContainer'>\n        {/* <Grid onKeyTap={handleKeyTap} /> */}\n\n        {/* added this */}\n        <Grid onKeyTap={handleKeyTap} isCapsLock={isCapsLock} />\n      </div>\n      <div>\n        <h3 className='rulesHeading'>Rules ↓</h3>\n        <h6 className='rules'>\n          Top letter: Single Tap | Bottom/Bottom Left: Double Tap\n        </h6>\n        <h6 className='rules'>\n          Bottom Right: Triple Tap | Hold for character repeat\n        </h6>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}