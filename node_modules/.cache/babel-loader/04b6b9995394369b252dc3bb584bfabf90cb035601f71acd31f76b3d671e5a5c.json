{"ast":null,"code":"var _jsxFileName = \"/Users/anmol/Downloads/tinytype/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css'; // Import the CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(0);\n  const handleKeyTap = key => {\n    const currentTime = new Date().getTime();\n    const tapDelay = 1000;\n    // console.log(currentTime, lastTap);\n\n    const handleSingleTap = () => {\n      if (key.type === 'function') {\n        // Handle function keys like delete here\n        if (key.action === 'delete') {\n          setInputValue(prevValue => prevValue.slice(0, -1)); // Remove the last character\n        }\n        if (key.action === 'caps') {\n          // You would need additional logic to handle caps lock state\n        }\n        if (key.action === 'space') {\n          setInputValue(prevValue => prevValue + ' ');\n        }\n        if (key.action === 'link') {\n          // change keyboard, render new screen\n        }\n        // Add other functional key handlers here...\n      } else {\n        // Add the top character for regular keys\n        setInputValue(prevValue => prevValue + key.top);\n      }\n    };\n    const handleDoubleTap = () => {\n      if (key.type === 'function') {\n        if (key.action === 'link') {\n          // change keyboard, render new screen\n        }\n      } else {\n        if (key.bottom) {\n          setInputValue(prevValue => prevValue + key.bottom.split(' ')[0]); // Take the first character if there are two\n        }\n      }\n    };\n\n    // const handleTripleTap = () => {\n    //   if (key.bottom && length(key.bottom) === 3) {\n    //     setInputValue((prevValue) => prevValue + key.bottom.split(' ')[1]);\n    //   }\n    // };\n    if (currentTime - lastTap < tapDelay) {\n      // If this tap happened soon after the last one, it's a double tap\n      setLastTap(0); // Reset the last tap time\n      handleDoubleTap(); // Handle double tap\n    } else {\n      // If not, process as a single tap after a delay, allowing for a potential second tap\n      setTimeout(() => {\n        if (currentTime - lastTap >= tapDelay) {\n          // Check if no additional taps occurred\n          handleSingleTap();\n        }\n      }, tapDelay);\n      setLastTap(currentTime); // Record the time of this tap\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"TinyType\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"textInput\",\n        placeholder: \"Type here...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        onKeyTap: handleKeyTap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"rulesHeading\",\n        children: \"Rules \\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Top letter: Single Tap | Bottom/Bottom Left: Double Tap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Bottom Right: Triple Tap | Hold for character repeat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"s267VmPI4xg9VdNUzQRKpl6eHGk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Grid","jsxDEV","_jsxDEV","App","_s","inputValue","setInputValue","lastTap","setLastTap","handleKeyTap","key","currentTime","Date","getTime","tapDelay","handleSingleTap","type","action","prevValue","slice","top","handleDoubleTap","bottom","split","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyTap","_c","$RefreshReg$"],"sources":["/Users/anmol/Downloads/tinytype/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css'; // Import the CSS for styling\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(0);\n\n  const handleKeyTap = (key) => {\n    const currentTime = new Date().getTime();\n    const tapDelay = 1000;\n    // console.log(currentTime, lastTap);\n\n    const handleSingleTap = () => {\n      if (key.type === 'function') {\n        // Handle function keys like delete here\n        if (key.action === 'delete') {\n          setInputValue((prevValue) => prevValue.slice(0, -1)); // Remove the last character\n        }\n        if (key.action === 'caps') {\n          // You would need additional logic to handle caps lock state\n        }\n        if (key.action === 'space') {\n          setInputValue((prevValue) => prevValue + ' ');\n        }\n        if (key.action === 'link') {\n          // change keyboard, render new screen\n        }\n        // Add other functional key handlers here...\n      } else {\n        // Add the top character for regular keys\n        setInputValue((prevValue) => prevValue + key.top);\n      }\n    };\n\n    const handleDoubleTap = () => {\n      if (key.type === 'function') {\n        if (key.action === 'link') {\n          // change keyboard, render new screen\n        }\n      } else {\n        if (key.bottom) {\n          setInputValue((prevValue) => prevValue + key.bottom.split(' ')[0]); // Take the first character if there are two\n        }\n      }\n    };\n\n    // const handleTripleTap = () => {\n    //   if (key.bottom && length(key.bottom) === 3) {\n    //     setInputValue((prevValue) => prevValue + key.bottom.split(' ')[1]);\n    //   }\n    // };\n    if (currentTime - lastTap < tapDelay) {\n      // If this tap happened soon after the last one, it's a double tap\n      setLastTap(0); // Reset the last tap time\n      handleDoubleTap(); // Handle double tap\n    } else {\n      // If not, process as a single tap after a delay, allowing for a potential second tap\n      setTimeout(() => {\n        if (currentTime - lastTap >= tapDelay) {\n          // Check if no additional taps occurred\n          handleSingleTap();\n        }\n      }, tapDelay);\n      setLastTap(currentTime); // Record the time of this tap\n    }\n  };\n  return (\n    <div className='container'>\n      <div>\n        <h1 className='title'>TinyType</h1>\n      </div>\n      <div className='inputContainer'>\n        <textarea\n          className='textInput'\n          placeholder='Type here...'\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n      </div>\n      <div className='gridContainer'>\n        <Grid onKeyTap={handleKeyTap} />\n      </div>\n      <div>\n        <h3 className='rulesHeading'>Rules â†“</h3>\n        <h6 className='rules'>\n          Top letter: Single Tap | Bottom/Bottom Left: Double Tap\n        </h6>\n        <h6 className='rules'>\n          Bottom Right: Triple Tap | Hold for character repeat\n        </h6>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEzC,MAAMU,YAAY,GAAIC,GAAG,IAAK;IAC5B,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACxC,MAAMC,QAAQ,GAAG,IAAI;IACrB;;IAEA,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAIL,GAAG,CAACM,IAAI,KAAK,UAAU,EAAE;QAC3B;QACA,IAAIN,GAAG,CAACO,MAAM,KAAK,QAAQ,EAAE;UAC3BX,aAAa,CAAEY,SAAS,IAAKA,SAAS,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD;QACA,IAAIT,GAAG,CAACO,MAAM,KAAK,MAAM,EAAE;UACzB;QAAA;QAEF,IAAIP,GAAG,CAACO,MAAM,KAAK,OAAO,EAAE;UAC1BX,aAAa,CAAEY,SAAS,IAAKA,SAAS,GAAG,GAAG,CAAC;QAC/C;QACA,IAAIR,GAAG,CAACO,MAAM,KAAK,MAAM,EAAE;UACzB;QAAA;QAEF;MACF,CAAC,MAAM;QACL;QACAX,aAAa,CAAEY,SAAS,IAAKA,SAAS,GAAGR,GAAG,CAACU,GAAG,CAAC;MACnD;IACF,CAAC;IAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAIX,GAAG,CAACM,IAAI,KAAK,UAAU,EAAE;QAC3B,IAAIN,GAAG,CAACO,MAAM,KAAK,MAAM,EAAE;UACzB;QAAA;MAEJ,CAAC,MAAM;QACL,IAAIP,GAAG,CAACY,MAAM,EAAE;UACdhB,aAAa,CAAEY,SAAS,IAAKA,SAAS,GAAGR,GAAG,CAACY,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE;MACF;IACF,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA,IAAIZ,WAAW,GAAGJ,OAAO,GAAGO,QAAQ,EAAE;MACpC;MACAN,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;MACfa,eAAe,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,MAAM;MACL;MACAG,UAAU,CAAC,MAAM;QACf,IAAIb,WAAW,GAAGJ,OAAO,IAAIO,QAAQ,EAAE;UACrC;UACAC,eAAe,CAAC,CAAC;QACnB;MACF,CAAC,EAAED,QAAQ,CAAC;MACZN,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC;EACD,oBACET,OAAA;IAAKuB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBxB,OAAA;MAAAwB,QAAA,eACExB,OAAA;QAAIuB,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACN5B,OAAA;MAAKuB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7BxB,OAAA;QACEuB,SAAS,EAAC,WAAW;QACrBM,WAAW,EAAC,cAAc;QAC1BC,KAAK,EAAE3B,UAAW;QAClB4B,QAAQ,EAAGC,CAAC,IAAK5B,aAAa,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN5B,OAAA;MAAKuB,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BxB,OAAA,CAACF,IAAI;QAACoC,QAAQ,EAAE3B;MAAa;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACN5B,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAIuB,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzC5B,OAAA;QAAIuB,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAEtB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACL5B,OAAA;QAAIuB,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAEtB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA1FID,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA4FT,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}