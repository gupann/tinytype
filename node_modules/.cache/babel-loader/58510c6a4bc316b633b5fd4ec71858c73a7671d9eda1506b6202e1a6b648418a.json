{"ast":null,"code":"var _jsxFileName = \"/Users/anmol/Downloads/tinytype/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css'; // Import the CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(null);\n  const [tapTimeoutId, setTapTimeoutId] = useState(null);\n  // const [tapCount, setTapCount] = useState(0); // Track the number of taps\n\n  const tapDelay = 1000;\n  const handleKeyTap = key => {\n    const currentTime = new Date().getTime();\n    // console.log(currentTime, lastTap);\n    let newTapCount = lastTap && currentTime - lastTap < tapDelay ? tapTimeoutId + 1 : 1;\n    const handleSingleTap = () => {\n      if (key.type === 'function') {\n        switch (key.action) {\n          case 'delete':\n            setInputValue(prevValue => prevValue.slice(0, -1));\n            break;\n          case 'caps':\n            // Logic for caps lock goes here\n            break;\n          case 'space':\n            setInputValue(prevValue => prevValue + ' ');\n            break;\n          // case 'link':\n          //   // Logic to change keyboard or render new screen goes here\n          //   break;\n          default:\n            break;\n        }\n      } else {\n        setInputValue(prevValue => prevValue + key.top);\n      }\n    };\n    const handleDoubleTap = () => {\n      if (key.bottom) {\n        if (key.type === 'function') {\n          if (key.action === 'link') {\n            // change keyboard, render new screen\n          }\n        } else {\n          setInputValue(prevValue => prevValue + key.bottom.split(' ')[0]); // Take the first character if there are two\n        }\n      }\n    };\n    const handleTripleTap = () => {\n      if (key.bottom && key.bottom.includes(' ')) {\n        setInputValue(prevValue => prevValue + key.bottom.split(' ')[1]);\n      }\n    };\n\n    // if (lastTap && currentTime - lastTap < tapDelay) {\n    //   // Double tap detected\n    //   clearTimeout(tapTimeoutId); // Clear the single tap timeout\n    //   handleDoubleTap();\n    // } else {\n    //   // Set a timeout to handle a single tap\n    //   const timeoutId = setTimeout(() => {\n    //     handleSingleTap();\n    //   }, tapDelay);\n    //   setTapTimeoutId(timeoutId); // Save the timeout ID so it can be cleared on a double tap\n    // }\n\n    // setLastTap(currentTime); // Update the last tap time\n\n    if (lastTap && currentTime - lastTap < tapDelay) {\n      setTapCount(prevCount => prevCount + 1); // Increment tap count\n    } else {\n      setTapCount(1); // Reset to 1 on first tap\n    }\n    setLastTap(currentTime);\n    clearTimeout(tapTimeoutId); // Clear any pending timeouts\n    const timeoutId = setTimeout(() => {\n      // Perform action based on tap count\n      if (tapCount === 1) handleSingleTap();else if (tapCount === 2) handleDoubleTap();else if (tapCount === 3) handleTripleTap();\n      setTapCount(0); // Reset tap count after handling\n    }, tapDelay);\n    setTapTimeoutId(timeoutId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"TinyType\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"textInput\",\n        placeholder: \"Type here...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        onKeyTap: handleKeyTap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"rulesHeading\",\n        children: \"Rules \\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Top letter: Single Tap | Bottom/Bottom Left: Double Tap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Bottom Right: Triple Tap | Hold for character repeat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0KyJ+ZVItOGaTWiv/rSkDi08u14=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Grid","jsxDEV","_jsxDEV","App","_s","inputValue","setInputValue","lastTap","setLastTap","tapTimeoutId","setTapTimeoutId","tapDelay","handleKeyTap","key","currentTime","Date","getTime","newTapCount","handleSingleTap","type","action","prevValue","slice","top","handleDoubleTap","bottom","split","handleTripleTap","includes","setTapCount","prevCount","clearTimeout","timeoutId","setTimeout","tapCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyTap","_c","$RefreshReg$"],"sources":["/Users/anmol/Downloads/tinytype/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css'; // Import the CSS for styling\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(null);\n  const [tapTimeoutId, setTapTimeoutId] = useState(null);\n  // const [tapCount, setTapCount] = useState(0); // Track the number of taps\n\n  const tapDelay = 1000;\n\n  const handleKeyTap = (key) => {\n    const currentTime = new Date().getTime();\n    // console.log(currentTime, lastTap);\n    let newTapCount =\n      lastTap && currentTime - lastTap < tapDelay ? tapTimeoutId + 1 : 1;\n\n    const handleSingleTap = () => {\n      if (key.type === 'function') {\n        switch (key.action) {\n          case 'delete':\n            setInputValue((prevValue) => prevValue.slice(0, -1));\n            break;\n          case 'caps':\n            // Logic for caps lock goes here\n            break;\n          case 'space':\n            setInputValue((prevValue) => prevValue + ' ');\n            break;\n          // case 'link':\n          //   // Logic to change keyboard or render new screen goes here\n          //   break;\n          default:\n            break;\n        }\n      } else {\n        setInputValue((prevValue) => prevValue + key.top);\n      }\n    };\n    const handleDoubleTap = () => {\n      if (key.bottom) {\n        if (key.type === 'function') {\n          if (key.action === 'link') {\n            // change keyboard, render new screen\n          }\n        } else {\n          setInputValue((prevValue) => prevValue + key.bottom.split(' ')[0]); // Take the first character if there are two\n        }\n      }\n    };\n\n    const handleTripleTap = () => {\n      if (key.bottom && key.bottom.includes(' ')) {\n        setInputValue((prevValue) => prevValue + key.bottom.split(' ')[1]);\n      }\n    };\n\n    // if (lastTap && currentTime - lastTap < tapDelay) {\n    //   // Double tap detected\n    //   clearTimeout(tapTimeoutId); // Clear the single tap timeout\n    //   handleDoubleTap();\n    // } else {\n    //   // Set a timeout to handle a single tap\n    //   const timeoutId = setTimeout(() => {\n    //     handleSingleTap();\n    //   }, tapDelay);\n    //   setTapTimeoutId(timeoutId); // Save the timeout ID so it can be cleared on a double tap\n    // }\n\n    // setLastTap(currentTime); // Update the last tap time\n\n    if (lastTap && currentTime - lastTap < tapDelay) {\n      setTapCount((prevCount) => prevCount + 1); // Increment tap count\n    } else {\n      setTapCount(1); // Reset to 1 on first tap\n    }\n\n    setLastTap(currentTime);\n\n    clearTimeout(tapTimeoutId); // Clear any pending timeouts\n    const timeoutId = setTimeout(() => {\n      // Perform action based on tap count\n      if (tapCount === 1) handleSingleTap();\n      else if (tapCount === 2) handleDoubleTap();\n      else if (tapCount === 3) handleTripleTap();\n\n      setTapCount(0); // Reset tap count after handling\n    }, tapDelay);\n\n    setTapTimeoutId(timeoutId);\n  };\n  return (\n    <div className='container'>\n      <div>\n        <h1 className='title'>TinyType</h1>\n      </div>\n      <div className='inputContainer'>\n        <textarea\n          className='textInput'\n          placeholder='Type here...'\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n      </div>\n      <div className='gridContainer'>\n        <Grid onKeyTap={handleKeyTap} />\n      </div>\n      <div>\n        <h3 className='rulesHeading'>Rules ↓</h3>\n        <h6 className='rules'>\n          Top letter: Single Tap | Bottom/Bottom Left: Double Tap\n        </h6>\n        <h6 className='rules'>\n          Bottom Right: Triple Tap | Hold for character repeat\n        </h6>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}