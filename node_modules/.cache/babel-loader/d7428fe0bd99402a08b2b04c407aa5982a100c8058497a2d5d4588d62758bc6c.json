{"ast":null,"code":"var _jsxFileName = \"/Users/anmol/Downloads/tinytype/src/Grid.js\";\nimport React from 'react';\nimport './Grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst keys = [{\n  top: 'a',\n  bottom: 'b'\n}, {\n  top: 'c',\n  bottom: 'd'\n}, {\n  top: 'e',\n  bottom: 'f'\n}, {\n  top: 'g',\n  bottom: 'h'\n}, {\n  top: 'i',\n  bottom: 'j'\n}, {\n  top: 'l',\n  bottom: 'k'\n}, {\n  top: 'n',\n  bottom: 'm'\n}, {\n  top: 'o',\n  bottom: 'p'\n}, {\n  top: 'r',\n  bottom: 'q'\n}, {\n  top: 's',\n  bottom: 't'\n}, {\n  top: 'u',\n  bottom: 'v w'\n}, {\n  top: 'x',\n  bottom: 'y z'\n}, {\n  top: '⇦',\n  type: 'function',\n  action: 'delete'\n}, {\n  top: '⇧',\n  type: 'function',\n  action: 'caps'\n}, {\n  top: '␣',\n  type: 'function',\n  action: 'space'\n}, {\n  top: '123',\n  bottom: '#+=',\n  type: 'function',\n  action: 'symbols'\n}];\n// const Grid = ({ onKeyTap }) => {\n//   const renderCells = () => {\n//     return keys.map((key, i) => (\n//       <div\n//         key={i}\n//         className={`cell ${key.type || ''}`}\n//         onClick={() => onKeyTap(key)}\n//       >\n//         <div className='top'>{key.top}</div>\n//         {key.bottom && <div className='bottom'>{key.bottom}</div>}\n//       </div>\n//     ));\n//   };\n//   return <div className='grid'>{renderCells()}</div>;\n// };\n\n// added this\n// const Grid = ({ onKeyTap, isCapsLock }) => {\n//   const renderCells = () => {\n//     return keys.map((key, i) => (\n//       <div\n//         key={i}\n//         className={`cell ${key.type || ''}`}\n//         onClick={() => onKeyTap(key)}\n//       >\n//         <div className='top'>\n//           {isCapsLock && key.top ? key.top.toUpperCase() : key.top}\n//         </div>\n//         {key.bottom && (\n//           <div className='bottom'>\n//             {isCapsLock ? key.bottom.toUpperCase() : key.bottom}\n//           </div>\n//         )}\n//       </div>\n//     ));\n//   };\n//   return <div className='grid'>{renderCells()}</div>;\n// };\n\n// const Grid = ({ onKeyTap, isCapsLock }) => {\n//   const renderCells = () => {\n//     return keys.map((key, i) => {\n//       const cellClass = `cell ${key.type || ''} ${\n//         key.action === 'caps' && isCapsLock ? 'caps-active' : ''\n//       }`;\n//       return (\n//         <div key={i} className={cellClass} onClick={() => onKeyTap(key)}>\n//           <div className='top'>\n//             {isCapsLock && key.top ? key.top.toUpperCase() : key.top}\n//           </div>\n//           {key.bottom && (\n//             <div className='bottom'>\n//               {isCapsLock ? key.bottom.toUpperCase() : key.bottom}\n//             </div>\n//           )}\n//         </div>\n//       );\n//     });\n//   };\n//   return <div className='grid'>{renderCells()}</div>;\n// };\n\nconst Grid = ({\n  onKeyTap,\n  isCapsLock\n}) => {\n  const renderCells = () => {\n    return keys.map((key, i) => {\n      const isCapsKey = key.action === 'caps';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${key.type || ''}`,\n        onClick: () => onKeyTap(key),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top\",\n          children: isCapsKey && isCapsLock ? '⬆' : key.top\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), \"\\\\\", ' ', key.bottom && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom\",\n          children: isCapsLock ? key.bottom.toUpperCase() : key.bottom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: renderCells()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","keys","top","bottom","type","action","Grid","onKeyTap","isCapsLock","renderCells","map","key","i","isCapsKey","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/anmol/Downloads/tinytype/src/Grid.js"],"sourcesContent":["import React from 'react';\nimport './Grid.css';\nconst keys = [\n  { top: 'a', bottom: 'b' },\n  { top: 'c', bottom: 'd' },\n  { top: 'e', bottom: 'f' },\n  { top: 'g', bottom: 'h' },\n  { top: 'i', bottom: 'j' },\n  { top: 'l', bottom: 'k' },\n  { top: 'n', bottom: 'm' },\n  { top: 'o', bottom: 'p' },\n  { top: 'r', bottom: 'q' },\n  { top: 's', bottom: 't' },\n  { top: 'u', bottom: 'v w' },\n  { top: 'x', bottom: 'y z' },\n  { top: '⇦', type: 'function', action: 'delete' },\n  { top: '⇧', type: 'function', action: 'caps' },\n  { top: '␣', type: 'function', action: 'space' },\n  { top: '123', bottom: '#+=', type: 'function', action: 'symbols' },\n];\n// const Grid = ({ onKeyTap }) => {\n//   const renderCells = () => {\n//     return keys.map((key, i) => (\n//       <div\n//         key={i}\n//         className={`cell ${key.type || ''}`}\n//         onClick={() => onKeyTap(key)}\n//       >\n//         <div className='top'>{key.top}</div>\n//         {key.bottom && <div className='bottom'>{key.bottom}</div>}\n//       </div>\n//     ));\n//   };\n//   return <div className='grid'>{renderCells()}</div>;\n// };\n\n// added this\n// const Grid = ({ onKeyTap, isCapsLock }) => {\n//   const renderCells = () => {\n//     return keys.map((key, i) => (\n//       <div\n//         key={i}\n//         className={`cell ${key.type || ''}`}\n//         onClick={() => onKeyTap(key)}\n//       >\n//         <div className='top'>\n//           {isCapsLock && key.top ? key.top.toUpperCase() : key.top}\n//         </div>\n//         {key.bottom && (\n//           <div className='bottom'>\n//             {isCapsLock ? key.bottom.toUpperCase() : key.bottom}\n//           </div>\n//         )}\n//       </div>\n//     ));\n//   };\n//   return <div className='grid'>{renderCells()}</div>;\n// };\n\n// const Grid = ({ onKeyTap, isCapsLock }) => {\n//   const renderCells = () => {\n//     return keys.map((key, i) => {\n//       const cellClass = `cell ${key.type || ''} ${\n//         key.action === 'caps' && isCapsLock ? 'caps-active' : ''\n//       }`;\n//       return (\n//         <div key={i} className={cellClass} onClick={() => onKeyTap(key)}>\n//           <div className='top'>\n//             {isCapsLock && key.top ? key.top.toUpperCase() : key.top}\n//           </div>\n//           {key.bottom && (\n//             <div className='bottom'>\n//               {isCapsLock ? key.bottom.toUpperCase() : key.bottom}\n//             </div>\n//           )}\n//         </div>\n//       );\n//     });\n//   };\n//   return <div className='grid'>{renderCells()}</div>;\n// };\n\nconst Grid = ({ onKeyTap, isCapsLock }) => {\n  const renderCells = () => {\n    return keys.map((key, i) => {\n      const isCapsKey = key.action === 'caps';\n      return (\n        <div\n          key={i}\n          className={`cell ${key.type || ''}`}\n          onClick={() => onKeyTap(key)}\n        >\n          <div className='top'>{isCapsKey && isCapsLock ? '⬆' : key.top}</div>\\{' '}\n          {key.bottom && (\n            <div className='bottom'>\n              {isCapsLock ? key.bottom.toUpperCase() : key.bottom}\n            </div>\n          )}\n        </div>\n      );\n    });\n  };\n  return <div className='grid'>{renderCells()}</div>;\n};\nexport default Grid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}