{"ast":null,"code":"var _jsxFileName = \"/Users/anmol/Downloads/tinytype/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css'; // Import the CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(0);\n  const [isDoubleTap, setIsDoubleTap] = useState(false);\n  const handleKeyTap = key => {\n    // Here you would handle the logic to update the inputValue based on the key tapped\n    const currentTime = new Date().getTime();\n    const tapDelay = 300;\n    if (currentTime - lastTap < tapDelay) {\n      // If this tap happened soon after the last one, it's a double tap\n      setIsDoubleTap(true);\n    } else {\n      // If not, reset the double tap state after a delay to allow for a potential second tap\n      setTimeout(() => setIsDoubleTap(false), tapDelay);\n    }\n    setLastTap(currentTime);\n    if (key.type === 'function') {\n      // Implement functionality for special keys like DELETE, CAPS, etc.\n      switch (key.action) {\n        case 'delete':\n          setInputValue(prevValue => prevValue.slice(0, -1));\n          break;\n        case 'caps':\n          // You would need additional logic to handle caps lock state\n          break;\n        case 'space':\n          setInputValue(prevValue => prevValue + ' ');\n          break;\n        case 'numbers':\n          // You would need additional logic to switch to a numbers/symbols layout\n          break;\n        default:\n          break;\n      }\n    } else {\n      // Add character to inputValue for regular keys\n      setInputValue(prevValue => prevValue + key.top); // This is just an example\n    }\n    setTimeout(() => {\n      if (isDoubleTap && key.bottom) {\n        // If it's a double tap and the key has a bottom character, add the bottom character\n        setInputValue(prevValue => prevValue + key.bottom.split(' ')[0]); // Take the first character if there are two\n        setIsDoubleTap(false); // Reset the double tap state\n      } else if (key.top) {\n        // If it's a single tap or a functional key, add the top character\n        setInputValue(prevValue => prevValue + key.top);\n      }\n    }, tapDelay);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"TinyType\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"textInput\",\n        placeholder: \"Type here...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        onKeyTap: handleKeyTap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"rulesHeading\",\n        children: \"Rules \\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Top letter: Single Tap | Bottom/Bottom Left: Double Tap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"rules\",\n        children: \"Bottom Right: Triple Tap | Hold for character repeat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"GUcrrbb++mhxk2SPqT1g9VQowbk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Grid","jsxDEV","_jsxDEV","App","_s","inputValue","setInputValue","lastTap","setLastTap","isDoubleTap","setIsDoubleTap","handleKeyTap","key","currentTime","Date","getTime","tapDelay","setTimeout","type","action","prevValue","slice","top","bottom","split","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyTap","_c","$RefreshReg$"],"sources":["/Users/anmol/Downloads/tinytype/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Grid from './Grid';\nimport './App.css'; // Import the CSS for styling\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [lastTap, setLastTap] = useState(0);\n  const [isDoubleTap, setIsDoubleTap] = useState(false);\n\n  const handleKeyTap = (key) => {\n    // Here you would handle the logic to update the inputValue based on the key tapped\n    const currentTime = new Date().getTime();\n    const tapDelay = 300;\n    if (currentTime - lastTap < tapDelay) {\n      // If this tap happened soon after the last one, it's a double tap\n      setIsDoubleTap(true);\n    } else {\n      // If not, reset the double tap state after a delay to allow for a potential second tap\n      setTimeout(() => setIsDoubleTap(false), tapDelay);\n    }\n    setLastTap(currentTime);\n\n    if (key.type === 'function') {\n      // Implement functionality for special keys like DELETE, CAPS, etc.\n      switch (key.action) {\n        case 'delete':\n          setInputValue((prevValue) => prevValue.slice(0, -1));\n          break;\n        case 'caps':\n          // You would need additional logic to handle caps lock state\n          break;\n        case 'space':\n          setInputValue((prevValue) => prevValue + ' ');\n          break;\n        case 'numbers':\n          // You would need additional logic to switch to a numbers/symbols layout\n          break;\n        default:\n          break;\n      }\n    } else {\n      // Add character to inputValue for regular keys\n      setInputValue((prevValue) => prevValue + key.top); // This is just an example\n    }\n\n    setTimeout(() => {\n      if (isDoubleTap && key.bottom) {\n        // If it's a double tap and the key has a bottom character, add the bottom character\n        setInputValue((prevValue) => prevValue + key.bottom.split(' ')[0]); // Take the first character if there are two\n        setIsDoubleTap(false); // Reset the double tap state\n      } else if (key.top) {\n        // If it's a single tap or a functional key, add the top character\n        setInputValue((prevValue) => prevValue + key.top);\n      }\n    }, tapDelay);\n  };\n  return (\n    <div className='container'>\n      <div>\n        <h1 className='title'>TinyType</h1>\n      </div>\n      <div className='inputContainer'>\n        <textarea\n          className='textInput'\n          placeholder='Type here...'\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n      </div>\n      <div className='gridContainer'>\n        <Grid onKeyTap={handleKeyTap} />\n      </div>\n      <div>\n        <h3 className='rulesHeading'>Rules â†“</h3>\n        <h6 className='rules'>\n          Top letter: Single Tap | Bottom/Bottom Left: Double Tap\n        </h6>\n        <h6 className='rules'>\n          Bottom Right: Triple Tap | Hold for character repeat\n        </h6>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}